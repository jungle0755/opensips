
####### Global Parameters #########

advertised_address="10.170.103.8"

debug=4
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4

/* add local domain aliases */
alias="10.170.103.8"

listen=udp:7.7.7.219:5060   # CUSTOMIZE ME

disable_tcp=yes

disable_tls=yes

############U1980##################
#u1980_address="10.170.103.241"
#route_prefix="U"


####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### DIALOG module
loadmodule "dialog.so"
/* How the seqential requests should be matched against the known dialogs. The modes are a combination between matching based on a cookie (DID) stored as cookie in Record-Route header and the matching based on SIP elements (as in RFC3261). 1 - DID_FALLBACK - the match is first tried based on DID and if not present, it will fallback to SIP matching. */
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
/* Describe how to push into the DB the dialogs' information from memory. 2 - DELAYED - the dialog information changes will be flushed into DB periodically, based on a timre routine. */
modparam("dialog", "db_mode", 0)
#modparam("dialog", "db_url","MySQL DB URL") # CUSTOMIZE ME

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "received_avp", "$avp(received_nh)")

loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:7.7.7.219:7890") # CUSTOMIZE ME
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7891") # CUSTOMIZE ME

#modparam("rtpproxy", "rtpproxy_sock", "1 == udp:localhost:12221")
#modparam("rtpproxy", "rtpproxy_sock", "2 == udp:localhost:12222")
modparam("nathelper", "force_socket", "udp:7.7.7.219:7890")

#modparam("nathelper", "force_socket", "udp:localhost:12221") 
### modparam("rtpproxy", "rtpproxy_autobridge", 1) 

####  dispatcher modules
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_interval", 5)
modparam("dispatcher", "ds_probing_threshhold", 10)
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "options_reply_codes", "501,403,404,400,200")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "use_default", 0)
modparam("dispatcher", "force_dst", 1)

####  load_balancer modules
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url","mysql://opensips:opensipsrw@localhost/opensips")
# ping every 30 secs the failed destinations
modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "probing_from", "sip:pinger@7.7.7.219")
# consider positive ping reply the 404 
modparam("load_balancer", "probing_reply_codes", "404")

loadmodule "dialplan.so"
modparam("dialplan", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")

####### Routing Logic ########
# main request routing logic

route
{
    xlog("L_INFO", "$ci|start|recieved $oP request $rm $ou");
    xlog("L_INFO", "$ci|log|source $si:$sp");
    xlog("L_INFO", "$ci|log|from $fu");
    xlog("L_INFO", "$ci|log|to $tu");
	
	/* add 'rport' param into Via header, insure the next SIP Message can return right port */
	force_rport();
    
	/* judge if Client Request is sended from a NAT net */
	/* 1:Contact header 2:received 16:src port != port in via */
	if (nat_uac_test("19"))
	{
		if (is_method("REGISTER")) 
		{
			/* create an URI=ip+port+protocol, which will be the param of 'received' in 200OK message */
			fix_nated_register();
			setbflag(NAT);
		} else 
		{
			/* rewrite URI Contact */
			fix_nated_contact();
			setflag(NAT);
		}
	}

	if (has_totag())
	{ 
		/* not an initial request */
		xlog("L_INFO", "SIP To header has_totag true\n");
		if (loose_route())
		{	
			/* Used to route the session request */
			route(relay);
		}
		exit;
	}
	
	/* is an initial request */
    xlog("L_INFO", "SIP To header has_totag false, is a initial request\n");

	if (!is_method("REGISTER|MESSAGE"))
	{
		/* Add a Record Route, as parameters for outbound interface */
        record_route_preset("10.170.103.8:5060");
	}
	
	if (is_method("REGISTER"))
	{
		/* Choose the distribution from the given set goals */
		/* 0: According to callid for HASH*/
		if (!ds_select_dst("1","0"))
		{
			xlog("L_INFO", "ds_select_dst error\n");
			send_reply("503", "Service Unavailable");
			exit;
		}
	}
	else if (is_method("INFO"))
	{
		xlog("zsl>>>>>  info body: $rb\n");

		/* Judge the forward direction */
		if (!ds_is_in_list("$si", "$sp"))
		{	/* client --> FS, need route */
			$var(cmd_str) = 'cmd-type=241';
			$var(srv_str) = 'service-type=1';
			$var(cmd_idx) = $(rb{s.index, $var(cmd_str)});
			$var(srv_idx) = $(rb{s.index, $var(srv_str)});

			if (($var(cmd_idx) >= 0) && ($var(srv_idx) >= 0))
			{	/* is first info, Specify the HASH routing */
				xlog("zsl>>>>>  client send the first info\n");
				if (!ds_select_dst("1","0"))
				{
					xlog("holywind>>>  ds_select_dst error");
					send_reply("503","Service Unavailable, ds_select_dst error");
					exit;
				}			
			}
			else
			{	/* Is the following info, according to the call-id splicing FS IP to route */
				xlog("zsl>>>>>  client send the following info\n");
				route(con_info);
			}
		}
		else
		{	/* FS --> client, Sent directly */
			xlog("zsl>>>>>  freeswitch send a info back\n");
		}
	}
	else if (is_method("INVITE"))
	{
		xlog("L_INFO", "zsl>>>>>  invite to number: $tU\n");
		if ($tU =~ "^[0-9]+\*[0-9]+#$")
		{
			route(one_click);
		}
        #load balance except msg from freeswitch
		else if (!ds_is_in_list("$si", "$sp","1"))
		{
			if(ds_is_in_list("$si","$sp","2"))
            {
				xlog("L_INFO", "step is in load balance by U1980");
            
				if(!load_balance("2", "pstn"))
				{
					xlog("L_INFO", "load_balance error");
					send_reply("503","Service Unavailable");
					exit;
				}
				xlog("chenbiao>>>>loadbal, du=$du");
            }
            else
            {
				/* Find the minimum load of FS, returns true, and set a new destination URI */
				if (!load_balance("1","conf"))
				{
					xlog("L_INFO", "load_balance error\n");
					send_reply("503","Service Unavailable");
					exit;
				}
            }
        }
        else /* The source address in the list of the dispatcher, skip forward load balance directly */
		{
            xlog("L_INFO", "source address is_in_list return true\n");
            if(dp_translate("0", "$ruri/$ruri"))
			{
				xlog("Find route to U19, $ruri");
			    remove_hf("To");
				insert_hf("To: <$ruri>\r\n", "From");
				setflag(NAT);
			}
			else
			{
				xlog("L_INFO", "The invite doesn't send to U1980, for no route rule");
			}
        }
    }
	
	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) /* These requests are not supported */
	{
		sl_send_reply("503", "Service Unavailable, not support");
		exit;
	}

	if (isbflagset(NAT))
		setflag(NAT);
	setflag(NAT);

	route(relay);
}



route[relay]
{
    xlog("L_INFO", "step in route[relay]\n");
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) 
	{
		if (isflagset(NAT)) 
        {
            xlog("chenbiao>>>>>  invite,isflageset = yes");
        }
        else
        {
            xlog("chenbiao>>>>>  invite,isflageset = no");
        }
        xlog("chenbiao>>>>>  write invite");
		
        if (isflagset(NAT)) 
        {
            xlog("chenbiao>>>>>  invite,isflageset = yes");
		    if (has_body("application/sdp")) /* There is SDP message body */
			{	
				/* Rewrite the SDP in the request, to ensure that the media flow through RTP agent */
				/* 1£ºINVITE->200OK 2:200OK->ACK */
				rtpproxy_offer("roci","10.170.103.8");
                xlog("chenbiao >>>>>write invite sdp");
                xlog("holywind>>> rtpproxy_offer\n");
			}
        }
        
		/* Call every time when response is accepted */
		t_on_reply("handle_nat");
		/* Call every time when response are failed */
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) 
	{
		/* add route-record parameters */
		add_rr_param(";nat=yes");
	}

	/* Forward the request */
	if (!t_relay())
	{
		send_reply("500", "Internet Error");
	}
	exit;
}

onreply_route[handle_nat] 
{
	if (nat_uac_test("1"))
		fix_nated_contact();
	if (isflagset(NAT)) 
	{
	    if (has_body("application/sdp")) 
		{
			/* Rewrite the SDP, in response to ensure that the media flow through RTP agent */
			rtpproxy_answer("roci","10.170.103.8");
			xlog("L_INFO", "rtpproxy_answer\n");
		}
	}
	xlog("L_INFO", "incoming reply\n");
}

failure_route[missed_call] 
{
	if (t_was_cancelled()) 
	{ /* The CANCEL request to CANCEL judgement */
		exit;
	}
}

route[con_info]
{
	/* get call-id from body */
	$var(call_str) = 'call-id=';
	$var(idx) = $(rb{s.index, $var(call_str)});
	$var(idx) = $var(idx) + 8;
	$var(id) = $(rb{s.substr, $var(idx), 10});
	
	/* get ip3 from call-id */
	$var(ip3) = $(var(id){s.substr, -3, 3});
	if ($(var(ip3){s.substr, 0, 1}) == '0')
	{
		$var(ip3) = $(var(ip3){s.substr, 1, 2});
		if ($(var(ip3){s.substr, 0, 1}) == '0')
		{
			$var(ip3) = $(var(ip3){s.substr, 1, 1});
		}
	}
	
	$var(ops_ip) = "7.7.7.219";
		
	$var(ip0) = $(var(ops_ip){s.select,0,.});
	$var(ip1) = $(var(ops_ip){s.select,1,.});
	$var(ip2) = $(var(ops_ip){s.select,2,.});
	
	/* Joining together into the FS IP */
	$var(fs_ip) = $var(ip0) + '.' + $var(ip1) + '.' + $var(ip2) + '.' + $var(ip3);

	xlog("zsl>>>>>  call-id: value $var(id), ip3: $var(ip3)\n");
	xlog("zsl>>>>>  ip0: $var(ip0), ip1: $var(ip1), ip2: $var(ip2), fs_ip: $var(fs_ip)\n");


	$du = "sip:" + $tU + "@" + $var(fs_ip);
	if (!t_relay())
	{
		send_reply("500", "Internet Error");
	}
	
	exit;
}

route[one_click]
{
	/* get the ip3 index at the To Username */
	xlog("zsl>>>>>  invite one click conference\n");
	$var(str) = '*';
	$var(idx) = $(tU{s.index, $var(str)});
	$var(idx) = $var(idx) - 3;
	
	/* get the ip3 */
	$var(ip3) = $(tU{s.substr, $var(idx), 3});
	xlog("zsl>>>>>  get ip3 from $tU: $var(ip3)\n");
	
	$var(ops_ip) = "7.7.7.219";
	
	$var(ip0) = $(var(ops_ip){s.select,0,.});
	$var(ip1) = $(var(ops_ip){s.select,1,.});
	$var(ip2) = $(var(ops_ip){s.select,2,.});
	
	/* Joining together into the FS IP */
	$var(fs_ip) =$var(ip0) + '.' + $var(ip1) + '.' + $var(ip2) + '.' + $var(ip3);
	xlog("zsl>>>>>  ip0: $var(ip0), ip1: $var(ip1), ip2: $var(ip2), ip3: $var(ip3), fs_ip: $var(fs_ip)\n");

	$du = "sip:" + $tU + "@" + $var(fs_ip);

	if (!t_relay())
	{
		send_reply("500", "Internet Error");
	}
	exit;
}
